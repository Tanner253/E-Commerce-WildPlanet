// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShop.data;

namespace MyShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190429183740_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyShop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("LoveAnimals");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = "6e27cdb0-7c32-43c1-a5a6-038ecc3a71d1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2015, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e204d9c8-d693-457e-99af-ec136e20b889",
                            Email = "boopy@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanner",
                            LastName = "Perci",
                            LockoutEnabled = false,
                            LoveAnimals = true,
                            PasswordHash = "billy",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "boopy@gmail.com"
                        },
                        new
                        {
                            Id = "c0bbc102-e471-4067-b899-19b577a366e6",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2000, 5, 15, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2c912714-7c08-4f9e-88b3-6ba41eca0ba9",
                            Email = "boop@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "chris",
                            LastName = "morto",
                            LockoutEnabled = false,
                            LoveAnimals = false,
                            PasswordHash = "billy",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "boop@gmail.com"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
